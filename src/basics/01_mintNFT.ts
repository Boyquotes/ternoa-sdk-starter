import {
	createNft,
	initializeApi,
	getKeyringFromSeed,
	WaitUntil,
	safeDisconnect,
	NFTCreatedEvent,
} from "ternoa-js";
import dotenv from "dotenv";
dotenv.config();

const mintNFT = async (): Promise<NFTCreatedEvent> => {
	console.log("Starting to create your NFT");
	try {
		// We first initialize the SDK API to connect to the Ternoa Chain.

		// You can optionaly specify the chain endpoint by passing the endpoint address as the first argument.
		// The default endpoint is Alphanet: "wss://alphanet.ternoa.com"
		await initializeApi();
		console.log(
			"Ternoa-JS API initialized: you're connected to the Ternoa Alphanet Network"
		);
		// It's not strictly necessary but the good practice is to initialize the API as soon as possible
		// in your project instead of initializing it in every functions.

		// Here, we create a keyring from the provided account seed.

		// Communication on the blockchain is achieved through executing extrinsics, also called transactions or tx.
		// In order to execute transactions, a keyring (containing your address) needs to sign them and pay the execution fee.
		// The keyring must be retrieved from the Ternoa Account seed you created before starting this tutorial.
		// In case you have not yet done this, add your SEED in a .env variable named SEED_TEST_FUNDS.
		const SEED_TEST_FUNDS = process.env.SEED_TEST_FUNDS;
		if (!SEED_TEST_FUNDS) throw new Error("SEED_UNDEFINED: Verify your .env variables")
		
		const keyring = await getKeyringFromSeed(SEED_TEST_FUNDS);
		console.log("Keyring set and ready to use for creating your first NFT");

		// Here we create the NFT with the createNft() function.

		// This single line function, requires a few parameters:
		// some offchainData, a royalty in case you sell you NFT, a collectionId if you want this NFT to belong to a collection,
		// a boolean to define its isSoulbound status,
		// the keyring that will be used to sign and submit the transaction,
		// and a waitUntil callback parameter.

		// Offchain data will be in most cases, an IPFS hash that points to a JSON file which contains
		// some real  (like "name", "description" or "image").
		// In other cases this can be a plain text, a small JSON string, or a link to either a static or a dynamic file.
		// In our example, we just pass a string: "Hello World"

		// WaitUntil define at which point we want to get the results of the transaction execution.
		// Either we get the results when the transaction is included in the block (BlockInclusion)
		// or when the transaction is included in the block and that block is also finalized (BlockFinalization).

		// It's important to know that besides the transaction fees the signer also pays additional NFT Mint fee for every minted NFT.
		const nftData = await createNft(
			"hello world",
			0,
			undefined,
			false,
			keyring,
			WaitUntil.BlockInclusion
		);
		// Result will return data from the CreatedNFTEvent event which was generated by the chain. Log it to see more.
		console.log("The on-chain NFT id is: ", nftData.nftId);
		console.log("Well done folks! See you later ðŸ‘‹");
	} catch (e) {
		console.error(e);
	} finally {
		await safeDisconnect();
		process.exit();
	}
};

mintNFT();
